// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authorize": {
            "get": {
                "description": "get authorize",
                "tags": [
                    "authorize"
                ],
                "summary": "get authorize",
                "parameters": [
                    {
                        "enum": [
                            "code"
                        ],
                        "type": "string",
                        "description": "code for Authorization Code Grant",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OAuth 2.0 Client Identifier valid at the Authorization Server.",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Redirection URI to which the response will be sent.",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OpenID Connect requests MUST contain the openid scope value.",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Opaque value used to maintain state between the request and the callback.",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "https://datatracker.ietf.org/doc/html/rfc7636",
                        "name": "code_challenge",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "S256"
                        ],
                        "type": "string",
                        "description": "https://datatracker.ietf.org/doc/html/rfc7636",
                        "name": "code_challenge_method",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.HTTPError"
                        }
                    }
                }
            }
        },
        "/decision": {
            "post": {
                "description": "get decision",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "tags": [
                    "decision"
                ],
                "summary": "get decision",
                "parameters": [
                    {
                        "type": "string",
                        "format": "email",
                        "description": "email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "password",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found",
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA\u0026state=af0ifjsldkj"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.HTTPError"
                        }
                    }
                }
            }
        },
        "/token": {
            "post": {
                "description": "post token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "post token",
                "parameters": [
                    {
                        "enum": [
                            "authorization_code"
                        ],
                        "type": "string",
                        "description": "Value MUST be set to authorization_code",
                        "name": "grant_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The authorization code received from the authorization server",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "if the redirect_uri parameter was included in the authorization request as described in Section 4.1.1, and their values MUST be identical.",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "if the client is not authenticating with the authorization server as described in Section 3.2.1",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.HTTPError"
                        }
                    }
                }
            }
        },
        "/v1/health": {
            "get": {
                "description": "get health",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "get health",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/domain.HTTPEmpty"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.ErrorCode": {
            "type": "string",
            "enum": [
                "invalid_request",
                "invalid_client",
                "invalid_grant",
                "unauthorized_client",
                "unsupported_grant_type",
                "invalid_scope"
            ],
            "x-enum-varnames": [
                "InvalidRequest",
                "InvalidClient",
                "InvalidGrant",
                "UnauthorizedClient",
                "UnsupportedGrantType",
                "InvalidScope"
            ]
        },
        "domain.HTTPEmpty": {
            "type": "object"
        },
        "domain.HTTPError": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/domain.ErrorCode"
                },
                "error_description": {
                    "type": "string"
                },
                "error_uri": {
                    "type": "string"
                }
            }
        },
        "domain.Token": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expired_in": {
                    "type": "integer"
                },
                "scope": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
